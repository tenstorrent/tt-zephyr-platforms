# This ansible-playbook script will setup a local GitHub runner and
# automatically run your fork's CI on your local machine to match the upstream
# repository's CI.
#
# Usage:
#   1) Look under "Settings/Actions/Runners/New self-hosted runner" on your
#      fork to find your runner's token under the "Configure" step for Linux.
#        ./config.sh --url https://github.com/<username>/tt-zephyr-platforms --token <token>
#   2) Run it with the ansible-playbook command,
#        tt-zephyr-platforms$ ansible-playbook scripts/ci-local-setup.yml \
#          --extra-vars "github_runner_token=<token> tt_zephyr_platforms=<fork url>"
#   3) Now under "Settings/Actions/Runners/New self-hosted runner" you should
#      see your runner in the idle state. When you make a PR or merge to main,
#      the workflow should automatically run as expected. As long as the
#      ansible-playbook terminal is open, your GitHub actions will run. If you
#      close the playbook, you can rerun the ansible-playbook command and the
#      GitHub runner will come back online.
#
# Requirements:
#   ansible-playbook
#
# References:
#   ansible-playbook: https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html
#   ci setup: https://tenstorrent.atlassian.net/wiki/spaces/syseng/pages/978518169/GitHub+CI+Setup

- name: CI Local Setup
  hosts: all
  gather_facts: true
  vars:
    tenstorrent_venv: "/opt/tenstorrent/.venv"
    jlink_serial: ""
    stlink_serial: ""
    board_id: ""
    board_type: ""

  tasks:
    # Find board type using tt-smi

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
      become: true

    - name: Install prerequisite packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
      become: true

    - name: Add Dockerâ€™s official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      become: true

    - name: Add Docker apt repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
      become: true

    - name: Install dependencies
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - cmake
          - libtool
          - autoconf
          - automake
          - pkg-config
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: true
      become: true

    - name: Install Rust
      ansible.builtin.shell:
        cmd: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          . "$HOME/.cargo/env"
        executable: /bin/bash

    - name: Clone tt-smi
      ansible.builtin.git:
        repo: https://github.com/tenstorrent/tt-smi.git
        dest: "$HOME/tt-smi"

    - name: Create Zephyr venv
      ansible.builtin.shell:
        cmd: |
          python3 -m venv {{ tenstorrent_venv }}
        creates: "{{ tenstorrent_venv }}/bin/pip"
      become: true

    - name: Ensure the application directory is owned by the correct user
      ansible.builtin.file:
        path: /opt/tenstorrent
        state: directory
        owner: ubuntu
        group: ubuntu
        recurse: true
      become: true

    - name: Install tt-smi
      ansible.builtin.shell:
        cmd: |
          {{ tenstorrent_venv }}/bin/pip install --upgrade pip
          {{ tenstorrent_venv }}/bin/pip install .
        chdir: "$HOME/tt-smi"
        creates: "{{ tenstorrent_venv }}/bin/tt-smi"

    - name: Get board ID from tt-smi
      ansible.builtin.shell:
        cmd: "{{ tenstorrent_venv }}/bin/tt-smi -s"
      register: tt_smi_out

    - name: Parse board ID
      ansible.builtin.set_fact:
        board_id: "{{ (tt_smi_out.stdout | from_json).device_info[0].board_info.board_id | \
          replace('\"', '') }}"
      when: tt_smi_out.rc == 0

    - name: Debug board id
      ansible.builtin.debug:
        msg: "board id: {{ board_id }}"

    - name: Determine board type
      ansible.builtin.set_fact:
        board_type: >-
          {% set board_id_int = (board_id | regex_replace('^0x', '') | int(base=16)) // (2**36) -%}
          {% if board_id_int == 61 %}p100
          {%- elif board_id_int == 67 %}p100a
          {%- elif board_id_int == 64 %}p150a
          {%- elif board_id_int == 65 %}p150b
          {%- elif board_id_int == 66 %}p150c
          {%- elif board_id_int == 68 %}p300a
          {%- elif board_id_int == 69 %}p300c
          {%- else %}{{ board_id_int }} unknown{% endif %}

    - name: Debug board type
      ansible.builtin.debug:
        msg: "board type: {{ board_type }}"

    # Find JLink and STLink IDs

    - name: Get USB devices
      ansible.builtin.shell: ls /dev/bus/usb/*/*
      register: usb_devices

    - name: Find JLink info
      ansible.builtin.shell: |
        for dev in {{ usb_devices.stdout_lines | join(' ') }}; do
          udevadm info --name=$dev 2>/dev/null | grep -q "ID_VENDOR=SEGGER" && \
          udevadm info --name=$dev | grep "ID_SERIAL_SHORT" && break
        done
      register: jlink_info

    - name: Parse JLink ID
      ansible.builtin.set_fact:
        jlink_id: "{{ (jlink_info.stdout | regex_search('ID_SERIAL_SHORT=(\\w+)', '\\1'))[0] }}"

    - name: Find STLink info
      ansible.builtin.shell: |
        for dev in {{ usb_devices.stdout_lines | join(' ') }}; do
          udevadm info --name=$dev 2>/dev/null | grep -q "ID_VENDOR=STMicroelectronics" && \
          udevadm info --name=$dev | grep "ID_SERIAL" && break
        done
      register: stlink_info

    - name: Parse STLink ID
      ansible.builtin.set_fact:
        stlink_id: "{{ (stlink_info.stdout | regex_search('ID_SERIAL=(\\w+)', '\\1'))[0] }}"

    - name: Debug JLink and STLink IDs
      ansible.builtin.debug:
        msg:
          - "JLink ID: {{ jlink_id }}"
          - "STLink ID: {{ stlink_id }}"

    # Create hardware map using board type, JLink and STLink IDs

    - name: Create hardware map directory
      ansible.builtin.file:
        path: /opt/tenstorrent/twister
        state: directory
      become: true

    - name: Create hardware map
      ansible.builtin.copy:
        dest: "/opt/tenstorrent/twister/hw-map.yml"
        content: |
          - connected: true
            id: "{{ stlink_id }}"
            platform: tt_blackhole@{{ board_type }}/tt_blackhole/dmc
            runner: openocd
            serial_pty: "rtt"
            flash_before: true
            product: ST-Link
          - connected: true
            id: "{{ jlink_id }}"
            platform: tt_blackhole@{{ board_type }}/tt_blackhole/smc
            runner: openocd
            runner_params:
              - "--openocd=/opt/tenstorrent/bin/openocd-rtt"
              - "--rtt-no-reset"
            serial_pty: "rtt"
            flash_before: true
            product: J-Link
      become: true

    # # Setup Zephyr Environment

    # - name: Install dependencies
    #   ansible.builtin.apt:
    #     name:
    #       - git
    #       - cmake
    #       - ninja-build
    #       - gperf
    #       - ccache
    #       - dfu-util
    #       - device-tree-compiler
    #       - wget
    #       - python3-dev
    #       - python3-venv
    #       - python3-tk
    #       - xz-utils
    #       - file
    #       - make
    #       - gcc
    #       - gcc-multilib
    #       - g++-multilib
    #       - libsdl2-dev
    #       - libmagic1
    #     state: present
    #     update_cache: true

    # - name: Create Tenstorrent workspace
    #   ansible.builtin.file:
    #     path: tenstorrent
    #     state: directory

    # - name: Create venv and install west
    #   ansible.builtin.shell: |
    #     cd tenstorrent &&
    #     python -m venv .venv &&
    #     . .venv/bin/activate &&
    #     pip install west

    # - name: Init west project
    #   ansible.builtin.shell:
    #     cd tenstorrent &&
    #     . .venv/bin/activate &&
    #     west init -m https://github.com/tenstorrent/tt-zephyr-platforms .

    # - name: Set git compression to 0 to prevent fetch failures
    #   ansible.builtin.shell: |
    #     git config --global core.compression 0 &&
    #     git config --global http.postBuffer 524288000

    # - name: Update west modules
    #   ansible.builtin.shell: |
    #     cd tenstorrent &&
    #     . .venv/bin/activate &&
    #     west update &&
    #     west packages pip --install

    # - name: Fetch west blobs
    #   ansible.builtin.shell: |
    #     cd tenstorrent &&
    #     . .venv/bin/activate &&
    #     west blobs fetch

    # - name: Apply west patches
    #   ansible.builtin.shell: |
    #     cd tenstorrent &&
    #     . .venv/bin/activate &&
    #     west patch apply

    # - name: Export Zephyr environment
    #   ansible.builtin.shell: |
    #     cd tenstorrent &&
    #     . .venv/bin/activate &&
    #     bash -c "source zephyr/zephyr-env.sh && west zephyr-export"

    # # Tenstorrent HugePages

    # - name: Setup HugePages
    #   ansible.builtin.shell: |
    #     export TEMP_DIR=$(mktemp -d)
    #     wget -P $TEMP_DIR https://github.com/tenstorrent/tt-system-tools/releases/download/ \
    #       upstream%2F1.1/tenstorrent-tools_1.1-5_all.deb
    #     sudo apt-get install -y --no-install-recommends $TEMP_DIR/tenstorrent-tools_1.1-5_all.deb
    #     sudo systemctl enable --now tenstorrent-hugepages.service
    #     rm -rf "$TEMP_DIR"

    # # Blackhole recovery

    # - name: Blackhole recovery
    #   ansible.builtin.shell: |
    #     cd /opt/tenstorrent/
    #     git clone git@yyz-gitlab.local.tenstorrent.com:syseng-platform/blackhole-recovery.git
    #     cd blackhole-recovery
    #     python -m venv .venv
    #     . .venv/bin/activate
    #     pip install -r requirements.txt

    - name: udev rules
      ansible.builtin.shell:
        cmd: |
          wget -O 60-openocd.rules "https://sf.net/p/openocd/code/ci/master/tree/contrib/"\
            "60-openocd.rules?format=raw"
          sudo cp 60-openocd.rules /etc/udev/rules.d
          sudo udevadm control --reload
          sudo udevadm trigger
        creates: $HOME/60-openocd.rules

    # Zephyr

    - name: Setup Zephyr SDK
      ansible.builtin.shell:
        cmd: |
          "wget "https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.17.2/\
          zephyr-sdk-0.17.2_linux-x86_64.tar.xz"
          wget -O - "https://github.com/zephyrproject-rtos/sdk-ng/releases/download/\
          v0.17.2/sha256.sum" | shasum --check --ignore-missing
          tar xvf zephyr-sdk-0.17.2_linux-x86_64.tar.xz
          cd zephyr-sdk-0.17.2
          ./setup.sh -t all -h -c
        creates: /opt/zephyr-sdk-0.17.2
        chdir: /opt/
      become: true

    # OpenOCD

    - name: Clone OpenOCD
      ansible.builtin.git:
        repo: https://github.com/danieldegrasse/openocd.git
        dest: "$HOME/openocd"
        clone: true
        version: riscv-and-arc-rtt
        force: true

    - name: Create OpenOCD directory
      ansible.builtin.file:
        path: /opt/tenstorrent/bin
        state: directory

    - name: Install OpenOCD
      ansible.builtin.shell:
        cmd: |
          ./bootstrap
          ./configure --prefix=/opt/tenstorrent
          make
          sudo make install
          sudo mv /opt/tenstorrent/bin/openocd /opt/tenstorrent/bin/openocd-rtt
        chdir: "$HOME/openocd"
        creates: /opt/tenstorrent/bin/openocd-rtt

    # Github Runner

    - name: Download GitHub runner
      ansible.builtin.shell:
        cmd: |
          mkdir $HOME/actions-runner && cd $HOME/actions-runner
          curl -o actions-runner-linux-x64-2.327.1.tar.gz -L "https://github.com/actions/runner/\
          releases/download/v2.327.1/actions-runner-linux-x64-2.327.1.tar.gz"
          tar xzf ./actions-runner-linux-x64-2.327.1.tar.gz
          ./config.sh --url {{ tt_zephyr_platforms }} --token {{ github_runner_token }} --unattended
        creates: $HOME/actions-runner

    - name: Set BOARD_TYPE variable in GitHub Actions
      ansible.builtin.shell:
        cmd: echo "BOARD_TYPE={{ board_type }}" >> $GITHUB_ENV
      environment:
        GITHUB_ENV: "{{ lookup('env', 'GITHUB_ENV') }}"
      when: lookup('env', 'GITHUB_ENV') != ''

    - name: Add user to docker group
      ansible.builtin.user:
        name: ubuntu
        groups: docker
        append: true
      become: true

    - name: Run GitHub runner
      ansible.builtin.shell:
        cmd: ./run.sh
        chdir: $HOME/actions-runner
