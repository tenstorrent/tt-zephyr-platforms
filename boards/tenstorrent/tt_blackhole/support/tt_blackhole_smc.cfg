#  Copyright (C) 2019-2023 Synopsys, Inc.
#  Copyright (c) 2024 Tenstorrent AI ULC
#  SPDX-License-Identifier: Apache-2.0

adapter driver jlink
adapter speed 10000
transport select jtag

source [find cpu/arc/hs.tcl]
source [find bmc-reset-vars.cfg]

set _coreid 0
set _dbgbase [expr {$_coreid << 13}]

set _CHIPNAME arc-em

proc toggle_srst {} {
	global OPENOCD
	global OPENOCD_DEFAULT_PATH
	global BMC_CFG
	global RST_GPIO_REG
	global RST_GPIO_CLR_MASK
	global RST_GPIO_SET_MASK

	echo "Resetting blackhole SOC"

	# This method works for all Blackhole cards but requires an SWD adapter on BMC
	if {[info exists BMC_CFG]} {
		exec $OPENOCD -s $OPENOCD_DEFAULT_PATH -f $BMC_CFG -c "init; mww $RST_GPIO_REG $RST_GPIO_SET_MASK; exit"
		sleep 10
		exec $OPENOCD -s $OPENOCD_DEFAULT_PATH -f $BMC_CFG -c "init; mww $RST_GPIO_REG $RST_GPIO_CLR_MASK; exit"
		return
	}

	# This method may be used as a fallback when no SWD adapter is available.
	# It does require that the SRST pin is brought out to the SMC debug interface.
	reset_config srst_only
	adapter assert srst
	sleep 10
	adapter deassert srst
}

# Override the init_reset procedure
proc init_reset {mode} {
	toggle_srst
	# Without this delay, the jtag scan fails
	sleep 100
	jtag arp_init
	# Check if core 0 actually reset. If so, PC should be at 0x4000_0080
	set _pc [expr [arc jtag get-aux-reg 0x6]]
	echo "PC is 0x[format %X $_pc]"
	if {$_pc != 0x40000080 && $_pc != 0x80} {
		echo "Reset failed, PC is 0x[format %X $_pc]!"
		exit 1
	}
	# Core 0 will be running after reset, which is out of sync
	# with OpenOCD's internal state. Halt the core manually by setting
	# the FH bit in the DEBUG aux reg
	set _debug [expr [arc jtag get-aux-reg 0x05]]
	arc jtag set-aux-reg 0x05 [expr {$_debug | 0x2}]
	# Call OpenOCD's halt function as well, to be sure the state is
	# right now
	halt
}

# This hook handles patching the program counter for blackhole, and
# kicking off the bootrom execution. We stop execution right before loading
# the application image.
proc bh_reset_end {} {
	# After reset, the program counter will be in the wrong location
	# 0x40000080. Set it to 0x84 to start normal execution
	set_reg {pc 0x84}
	# Set a hardware breakpoint in the bootrom directly before jumping to
	# application code
	bp 0x1007c314 4 hw
	# Run the core
	resume
	# Wait for bootrom to execute
	sleep 100
	# Halt core, remove breakpoint
	halt
	rbp 0x1007c314
}

proc setup_cpu {core_index expected_id} {
	global _coreid
	global _dbgbase
	global _CHIPNAME

	set _TARGETNAME $_CHIPNAME.cpu$core_index
	set _coreid [expr {$core_index - 1}]
	set _dbgbase [expr {$_coreid << 13}]
	jtag newtap $_CHIPNAME cpu$core_index -irlen 4 -ircapture 0x1 -expected-id $expected_id

	target create $_TARGETNAME arcv2 -chain-position $_TARGETNAME
	$_TARGETNAME configure -coreid $_coreid
	$_TARGETNAME configure -dbgbase $_dbgbase
	$_TARGETNAME configure -event reset-assert "arc_hs_reset $_TARGETNAME"

	arc_hs_init_regs

	# Enable L2 cache support
	$_TARGETNAME arc cache l2 auto 1
}

jtag newtap security.cpu1 unknown1 -irlen 4 -ircapture 0x1 -expected-id 0x201444b1

# OpenOCD discovers JTAG TAPs in reverse order.
setup_cpu 4 0x100c54b1
setup_cpu 3 0x100854b1
setup_cpu 2 0x100454b1
setup_cpu 1 0x100054b1

# Disable GDB port for CPU2-CPU4. Otherwise the GDB server will connect to
# CPU4 by default, as it is the first target
arc-em.cpu2 configure -gdb-port disabled
arc-em.cpu3 configure -gdb-port disabled
arc-em.cpu4 configure -gdb-port disabled

# Set reset end hook for CPU1. Not needed for other cores, as they don't
# execute at boot.
arc-em.cpu1 configure -event reset-end "bh_reset_end"

# Use hard breakpoints- the ROM copies over the memory in CSM during boot,
# so soft breakpoints won't work
gdb_breakpoint_override hard
