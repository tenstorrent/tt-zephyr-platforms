diff --git a/scripts/pylib/twister/twisterlib/handlers.py b/scripts/pylib/twister/twisterlib/handlers.py
index dc1ff258935..9572790d834 100755
--- a/scripts/pylib/twister/twisterlib/handlers.py
+++ b/scripts/pylib/twister/twisterlib/handlers.py
@@ -716,9 +716,10 @@ class DeviceHandler(Handler):
         runner = hardware.runner or self.options.west_runner
         serial_pty = hardware.serial_pty
 
-        serial_device, ser_pty_process = self._get_serial_device(serial_pty, hardware.serial)
-
-        logger.debug(f"Using serial device {serial_device} @ {hardware.baud} baud")
+        if not hardware.flash_before:
+            serial_device, ser_pty_process = self._get_serial_device(
+                serial_pty, hardware.serial)
+            logger.debug(f"Using serial device {serial_device} @ {hardware.baud} baud")
 
         command = self._create_command(runner, hardware)
 
@@ -737,28 +738,27 @@ class DeviceHandler(Handler):
         if hardware.flash_with_test:
             flash_timeout += self.get_test_timeout()
 
-        serial_port = None
-        if hardware.flash_before is False:
-            serial_port = serial_device
-
-        try:
-            ser = self._create_serial_connection(
-                hardware,
-                serial_port,
-                hardware.baud,
-                flash_timeout,
-                serial_pty,
-                ser_pty_process
-            )
-        except serial.SerialException:
-            return
+        halt_monitor_evt = None
+        t = None
+        if not hardware.flash_before:
+            try:
+                ser = self._create_serial_connection(
+                    hardware,
+                    serial_device,
+                    hardware.baud,
+                    flash_timeout,
+                    serial_pty,
+                    ser_pty_process
+                )
+            except serial.SerialException:
+                return
 
-        halt_monitor_evt = threading.Event()
+            halt_monitor_evt = threading.Event()
 
-        t = threading.Thread(target=self.monitor_serial, daemon=True,
-                             args=(ser, halt_monitor_evt, harness))
-        start_time = time.time()
-        t.start()
+            t = threading.Thread(target=self.monitor_serial, daemon=True,
+                                args=(ser, halt_monitor_evt, harness))
+            start_time = time.time()
+            t.start()
 
         d_log = f"{self.instance.build_dir}/device.log"
         logger.debug(f'Flash command: {command}', )
@@ -777,7 +777,8 @@ class DeviceHandler(Handler):
                         flash_error = True
                         with open(d_log, "w") as dlog_fp:
                             dlog_fp.write(stderr.decode())
-                        halt_monitor_evt.set()
+                        if halt_monitor_evt:
+                            halt_monitor_evt.set()
                 except subprocess.TimeoutExpired:
                     logger.warning("Flash operation timed out.")
                     self.terminate(proc)
@@ -790,7 +791,8 @@ class DeviceHandler(Handler):
                 dlog_fp.write(stderr.decode())
 
         except subprocess.CalledProcessError:
-            halt_monitor_evt.set()
+            if halt_monitor_evt:
+                halt_monitor_evt.set()
             self.instance.status = TwisterStatus.ERROR
             self.instance.reason = "Device issue (Flash error)"
             flash_error = True
@@ -801,26 +803,44 @@ class DeviceHandler(Handler):
                 timeout = script_param.get("post_flash_timeout", timeout)
             self.run_custom_script(post_flash_script, timeout)
 
-        # Connect to device after flashing it
         if hardware.flash_before:
+            serial_device, ser_pty_process = self._get_serial_device(
+                serial_pty, hardware.serial)
+            logger.debug(f"Using serial device {serial_device} @ {hardware.baud} baud")
+
             try:
                 logger.debug(f"Attach serial device {serial_device} @ {hardware.baud} baud")
-                ser.port = serial_device
-                ser.open()
+                ser = self._create_serial_connection(
+                    hardware,
+                    serial_device,
+                    hardware.baud,
+                    flash_timeout,
+                    serial_pty,
+                    ser_pty_process
+                )
             except serial.SerialException as e:
                 self._handle_serial_exception(e, hardware, serial_pty, ser_pty_process)
                 return
 
+            halt_monitor_evt = threading.Event()
+
+            t = threading.Thread(target=self.monitor_serial, daemon=True,
+                                 args=(ser, halt_monitor_evt, harness))
+            start_time = time.time()
+            t.start()
+
         if not flash_error:
             # Always wait at most the test timeout here after flashing.
-            t.join(self.get_test_timeout())
+            if t:
+                t.join(self.get_test_timeout())
         else:
             # When the flash error is due exceptions,
             # twister tell the monitor serial thread
             # to close the serial. But it is necessary
             # for this thread being run first and close
             # have the change to close the serial.
-            t.join(0.1)
+            if t:
+                t.join(0.1)
 
         if t.is_alive():
             logger.debug(
