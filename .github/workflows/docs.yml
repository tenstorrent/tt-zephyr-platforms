# Copyright (c) 2024, Nordic Semiconductor ASA
# SPDX-License-Identifier: Apache-2.0

name: Documentation

on:
  push:
    branches: [main]
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  DOXYGEN_VERSION: 1.14.0

jobs:
  ci-stats:
    strategy:
      matrix:
        board: [p100a, p150a, p300a]
    runs-on: ubuntu-22.04
    permissions:
      actions: read
    steps:
      - name: Install dependencies
        run: |
           npm install adm-zip csv-parse csv-stringify

           pip install plotly pandas

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: tt-zephyr-platforms

      - name: Download Past CI runs
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const AdmZip = require('adm-zip');
            const fs = require('fs');
            const { parse } = require('csv-parse/sync');
            const { stringify } = require('csv-stringify/sync');

            // Aggregate results by test name and workflow run
            const testResults = {};
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Stress test results (${{ matrix.board }})',
            });
            console.log(`Total artifacts found: ${artifacts.data.artifacts.length}`);

            for (const artifact of artifacts.data.artifacts) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });

              const fname = `${artifact.name}-${artifact.id}-${artifact.workflow_run.head_sha}.zip`;
              fs.writeFileSync(fname, Buffer.from(download.data));

              const zip = new AdmZip(fname);
              const zipEntries = zip.getEntries();

              zipEntries.forEach(function (zipEntry) {
                if (zipEntry.name === "recording.csv") {
                  console.log(`Processing ${zipEntry.entryName} from artifact ${artifact.name} (${artifact.id})`);
                  const content = zipEntry.getData().toString('utf8');

                  // Parse CSV content
                  const records = parse(content, {
                    columns: true,
                    trim: true
                  });

                  // Process each record
                  records.forEach(record => {
                    const testName = record.test_name;
                    const workflowRunId = artifact.workflow_run.id;

                    if (!testResults[testName]) {
                      testResults[testName] = {};
                    }

                    if (artifact.workflow_run.head_branch != 'main') {
                      console.log(`Skipping artifact ${artifact.id}, branch ${artifact.workflow_run.head_branch}`);
                      return;
                    }

                    if (!testResults[testName][workflowRunId]) {
                      testResults[testName][workflowRunId] = {
                        commit: artifact.workflow_run.head_sha,
                        branch: artifact.workflow_run.head_branch,
                        timestamp: artifact.created_at,
                        workflow_run_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${workflowRunId}`,
                        total_tries: 0,
                        fail_count: 0
                      };
                    }

                    // Aggregate total_tries and fail_count
                    testResults[testName][workflowRunId].total_tries += parseInt(record.total_tries);
                    testResults[testName][workflowRunId].fail_count += parseInt(record.fail_count);
                  });
                }
              });
            }

            // Create CSV files for each test
            Object.entries(testResults).forEach(([testName, workflowRuns]) => {
              // Convert to CSV
              const csvData = [
                ['Fail Count', 'Total Tries', 'Failure Percentage', 'Commit', 'Branch', 'Workflow Run URL', 'Timestamp']
              ];

              // Flatten the nested object into an array
              Object.values(workflowRuns).forEach(result => {
                csvData.push([
                  result.fail_count,
                  result.total_tries,
                  result.total_tries > 0 ? (result.fail_count / result.total_tries * 100).toFixed(2) + '%' : '0.00%',
                  result.commit,
                  result.branch,
                  result.workflow_run_url,
                  result.timestamp
                ]);
              });

              // Write CSV file
              const csvContent = stringify(csvData);
              fs.writeFileSync(`${testName} results.csv`, csvContent);
              console.log(`Created ${testName} results.csv`);
            });

      - name: Generate HTML Report
        run: |
          python3 tt-zephyr-platforms/scripts/ci/render_ci_table.py . ci_stats.html ${{ matrix.board }}

      - name: Upload CSV Results
        uses: actions/upload-artifact@v4
        with:
          name: test-result-summaries ${{ matrix.board }}
          path: |
            ci_stats.html
            *results.csv

  build:
    runs-on: ubuntu-22.04
    needs: ci-stats
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: tt-zephyr-platforms

      - name: Install dependencies
        working-directory: tt-zephyr-platforms
        run: |
          wget --no-verbose "https://github.com/doxygen/doxygen/releases/download/Release_${DOXYGEN_VERSION//./_}/doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz"
          tar xf doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz
          echo "${PWD}/doxygen-${DOXYGEN_VERSION}/bin" >> $GITHUB_PATH
          pip install -r doc/requirements.txt

      - name: Clone Zephyr
        run: |
          pip install west
          west init -l tt-zephyr-platforms
          west update
          west patch apply

      - name: Build
        working-directory: tt-zephyr-platforms
        run: |
          # Install any additional packages needed for doc build
          sudo apt-get install -y graphviz
          cd doc

          # IMPORTANT: symlink directories here that are needed during the sphinx build
          # There may be a better way to do this, but this seems to be simplest at the moment.
          # It's required because symlinks trip check_compliance.py.
          ln -sf ../boards .

          rm -f zephyr.tag
          wget https://docs.zephyrproject.org/latest/doxygen/html/zephyr.tag -O /tmp/zephyr.tag

          # We should try to limit the number of environment variables we reference in Doxyfile
          # but they can be added here, as needed.
          # For reference, this method of passing variables is based on Doxygen's examples
          # https://github.com/doxygen/doxygen/issues/7975
          ( \
            cat Doxyfile; \
            echo "PROJECT_NUMBER=$(../scripts/get_ttzp_version.py)"; \
            echo "" \
          ) | doxygen -

          make html

          mkdir deploy
          mv _build_doxygen/html deploy/doxygen
          mv _build_sphinx/html/* deploy
          rm -rf _build_doxygen _build_sphinx

      - name: Download CI Results
        uses: actions/download-artifact@v4
        with:
          path: ci-results
          pattern: test-result-summaries*

      - name: Copy CI Results
        run: |
          for board in p100a p150a p300a; do
            cp "ci-results/test-result-summaries ${board}/ci_stats.html" \
              tt-zephyr-platforms/doc/deploy/${board}_ci_stats.html
          done

      - name: Setup pages
        if: github.event_name != 'pull_request'
        uses: actions/configure-pages@v4

      - name: Upload pages artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-pages-artifact@v3
        with:
          path: tt-zephyr-platforms/doc/deploy

      - name: Upload artifacts
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          path: tt-zephyr-platforms/doc/deploy

  deploy:
    runs-on: ubuntu-22.04
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      pages: write
      id-token: write
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
