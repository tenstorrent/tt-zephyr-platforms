name: Hardware Long Tests

# Run long tests once nightly, at 00:00
# on:
#   schedule:
#     - cron: "0 0 * * *"

on:
  push:
    branches:
      - main
      - v*-branch
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main
      - v*-branch

jobs:
  hardware-metal-test:
    if: github.repository_owner == 'tenstorrent'
    strategy:
      fail-fast: false
      matrix:
        config:
          - board: p100
            runs-on:
              - yyz-zephyr-lab-p100
          - board: p100a
            runs-on:
              - yyz-zephyr-lab-p100a
    runs-on: ${{ matrix.config.runs-on }}
    env:
      "ZEPHYR_SDK_INSTALL_DIR": /opt/toolchains
    container:
      image: ghcr.io/zephyrproject-rtos/ci-repo-cache:v0.27.4.20241026
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /opt/tenstorrent/fw/stable:/opt/tenstorrent/fw/stable
        - /opt/tenstorrent/twister:/opt/tenstorrent/twister
        - /opt/tenstorrent/bin/openocd-rtt:/opt/tenstorrent/bin/openocd-rtt
      options: '--device /dev/tenstorrent --device /dev/bus/usb --privileged'
    steps:
      - uses: actions/checkout@v4
        with:
          path: tt-zephyr-platforms
      - uses: ./tt-zephyr-platforms/.github/workflows/prepare-zephyr
        with:
          app-path: tt-zephyr-platforms

      - name: Log Test SHA
        working-directory: tt-zephyr-platforms
        run: |
          # debug
          git log  --pretty=oneline | head -n 10

      - name: Generate board names
        shell: bash
        run: |
          case "${{ matrix.config.board }}" in
            p100) SMC_BOARD=tt_blackhole@p100/tt_blackhole/smc;;
            p100a) SMC_BOARD=tt_blackhole@p100a/tt_blackhole/smc;;
            p150a) SMC_BOARD=tt_blackhole@p150a/tt_blackhole/smc;;
            *) echo "Unknown board: ${{ matrix.config.board }}"; exit 1;;
          esac
          case "${{ matrix.config.board }}" in
            p100) BMC_BOARD=tt_blackhole@p100/tt_blackhole/bmc;;
            p100a) BMC_BOARD=tt_blackhole@p100a/tt_blackhole/bmc;;
            p150a) BMC_BOARD=tt_blackhole@p150a/tt_blackhole/bmc;;
            *) echo "Unknown board: ${{ matrix.config.board }}"; exit 1;;
          esac
          echo "SMC_BOARD=$SMC_BOARD" >> "$GITHUB_ENV"
          echo "BMC_BOARD=$BMC_BOARD" >> "$GITHUB_ENV"

      - name: Flash Firmware
        working-directory: zephyr
        run: |
          # Flash the BMFW app back onto the BMC. Otherwise the flash device
          # will not be muxed to the SMC, and flash tests will fail
          ./scripts/twister -i --retry-failed 3 \
            --retry-interval 5 \
            --tag e2e \
            -p $BMC_BOARD --device-testing \
            --hardware-map /opt/tenstorrent/twister/hw-map.yml --west-flash \
            -T ../tt-zephyr-platforms/app -ll DEBUG \
            --outdir twister-bmc-e2e

          # Run tests tagged with "smoke"
          ./scripts/twister -i --retry-failed 3 \
            -p $SMC_BOARD --device-testing \
            --hardware-map /opt/tenstorrent/twister/hw-map.yml --west-flash \
            --tag smoke \
            --alt-config-root ../tt-zephyr-platforms/test-conf/samples \
            --alt-config-root ../tt-zephyr-platforms/test-conf/tests \
            --outdir twister-smc-smoke

      - name: Fix APT URLs
        run: |
          # Patch APT URLs to use https
          sed -i -e 's/http/https/g' /etc/apt/sources.list
          apt update

      - name: Install clang 17
        run: |
          wget https://apt.llvm.org/llvm.sh
          sed -i "s/http:\/\/apt.llvm.org/https:\/\/apt.llvm.org/" -i llvm.sh
          chmod +x llvm.sh
          ./llvm.sh 17 all
          rm -f llvm.sh

      - name: Install Git LFS
        run: |
          apt install -y git-lfs

      - name: Checkout Metal
        uses: actions/checkout@v4
        with:
          repository: tenstorrent/tt-metal
          path: tt-metal
          lfs: true
          submodules: true
          ref: v0.56.0

      - name: Install Metal Dependencies
        working-directory: tt-metal
        continue-on-error: true
        shell: bash
        run: |
          sed -i 's/cmake_minimum_required.*/cmake_minimum_required(VERSION 3.20)/' CMakeLists.txt
          sed -i 's/apt-get install/apt-get install -y/' install_dependencies.sh
          sed -i 's/python3.8-venv/python3.10-venv/' install_dependencies.sh
          apt install -y python3.10-dev python3.10-venv libpython3.10-dev python3.10
          # This script will fail to install the tt-hugepages service, just ignore it
          ./install_dependencies.sh

      - name: Run Metal Tests
        working-directory: tt-metal
        shell: bash
        env:
          ARCH_NAME: blackhole
          TT_METAL_HOME: ${{ github.workspace }}/tt-metal
          PYTHONPATH: ${{ github.workspace }}/tt-metal
        run: |
          # Debug
          python3 -V
          # Build metal
          ./build_metal.sh --build-tests --build-programming-examples
          PYTHON_CMD=python3.10 source ./create_venv.sh
          # Run metal tests
          tests/scripts/run_cpp_unit_tests.sh
          TT_METAL_SLOW_DISPATCH_MODE=1 tests/scripts/run_cpp_unit_tests.sh
