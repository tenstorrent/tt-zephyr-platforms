name: Hardware Long Tests

# Run long tests once nightly, at 00:00
on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-fw-artifact:
    uses: ./.github/workflows/build-fw.yml
    secrets:
      SIGNATURE_KEY: ${{ secrets.SIGNATURE_KEY }}
  reset-hammer-test:
    strategy:
      fail-fast: false
      matrix:
        config:
          - board: p100
            runs-on:
              - p100-jtag
          - board: p100a
            runs-on:
              - p100a-jtag
          - board: p150a
            runs-on:
              - p150a-jtag
    runs-on: ${{ matrix.config.runs-on }}
    env:
      "ZEPHYR_SDK_INSTALL_DIR": /opt/toolchains
    container:
      image: ghcr.io/zephyrproject-rtos/ci-repo-cache:v0.27.4.20241026
      volumes:
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /opt/tenstorrent/:/opt/tenstorrent/
      options: '--device /dev/tenstorrent --device /dev/bus/usb --privileged'
    steps:
      - uses: actions/checkout@v4
        with:
          path: tt-zephyr-platforms
          ref: ${{ github.ref }}
      - uses: ./tt-zephyr-platforms/.github/workflows/prepare-zephyr
        with:
          app-path: tt-zephyr-platforms

      - name: Generate board names
        working-directory: tt-zephyr-platforms
        shell: bash
        run: |
          SMC_BOARD="$(./scripts/rev2board.sh "${{ matrix.config.board }}" smc)"
          echo "SMC_BOARD=$SMC_BOARD" >> "$GITHUB_ENV"

          DMC_BOARD="$(./scripts/rev2board.sh "${{ matrix.config.board }}" dmc)"
          echo "DMC_BOARD=$DMC_BOARD" >> "$GITHUB_ENV"

      - name: Run reset test
        working-directory: tt-zephyr-platforms
        timeout-minutes: 90
        shell: bash
        run: |
          ./scripts/run-reset-hammer.sh $SMC_BOARD 1000

      - name: Print RTT logs
        if: ${{ failure() }}
        working-directory: tt-zephyr-platforms
        run: |
          echo "DMC RTT logs:"
          python3 ./scripts/dmc_rtt.py -n --openocd /opt/tenstorrent/bin/openocd-rtt
          echo "SMC RTT logs:"
          python3 ./scripts/smc_rtt.py -n --openocd /opt/tenstorrent/bin/openocd-rtt
