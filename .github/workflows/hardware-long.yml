name: Hardware Long Tests

# Run long tests once nightly, at 00:00
on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  hardware-metal-test:
    strategy:
      fail-fast: false
      matrix:
        config:
          - board: p100
            runs-on:
              - yyz-zephyr-lab-p100
          - board: p100a
            runs-on:
              - yyz-zephyr-lab-p100a
    runs-on: ${{ matrix.config.runs-on }}
    container:
      image: ghcr.io/tenstorrent/tt-metal/tt-metalium/ubuntu-22.04-dev-amd64:bd47135f35f7b26851eb09066076fb3e6074c54f # Change this to a tag when metal has release versions for this image.
      volumes:
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /dev/hugepages:/dev/hugepages
      options: '--device /dev/tenstorrent --device /dev/bus/usb --privileged'
    env:
      ARCH_NAME: blackhole
      TT_METAL_HOME: ${{ github.workspace }}/tt-metal
      PYTHONPATH: ${{ github.workspace }}/tt-metal
    steps:
      - name: Install Git LFS and Cargo (for tt-flash)
        run: |
          apt update
          apt install -y git-lfs cargo unzip
      - name: Download the latest firmware bundle
        # Replace this with the reliance on the previous workflow that builds the firmware bundle.
        run: |
          curl -L -o combined-fwbundle.zip https://nightly.link/tenstorrent/tt-zephyr-platforms/workflows/build-fw/main/combined-fwbundle.zip
          unzip combined-fwbundle.zip
      - name: Flash the firmware
        run: |
          pip install git+https://github.com/tenstorrent/tt-flash.git
          tt-flash --fw-tar fw_pack*.fwbundle --force
      - name: Run the rescan-pcie.sh script
        run: |
          curl -o /tmp/rescan-pcie.sh https://raw.githubusercontent.com/tenstorrent/tt-zephyr-platforms/${{ github.ref }}/scripts/rescan-pcie.sh
          . /tmp/rescan-pcie.sh
      - name: Checkout Metal
        uses: actions/checkout@v4
        with:
          repository: tenstorrent/tt-metal
          path: tt-metal
          lfs: true
          submodules: true
          ref: 12652be514e62224b5ccb160e5248fc83dfd96c1 # Change this when metal revision is available.
          fetch-depth: 500
          fetch-tags: true
      - name: Build Metal UMD Tests
        working-directory: tt-metal
        shell: bash
        env:
          ARCH_NAME: blackhole
          TT_METAL_HOME: ${{ github.workspace }}/tt-metal
          PYTHONPATH: ${{ github.workspace }}/tt-metal
        run: |
          # Build metal
          ./build_metal.sh --build-umd-tests
      - name: Run Metal UMD Tests
        working-directory: tt-metal
        shell: bash
        env:
          ARCH_NAME: blackhole
          TT_METAL_HOME: ${{ github.workspace }}/tt-metal
        run: |
          ./build/test/umd/blackhole/unit_tests
      - name: Build Other Metal Tests
        shell: bash
        working-directory: tt-metal
        env:
          ARCH_NAME: blackhole
          TT_METAL_HOME: ${{ github.workspace }}/tt-metal
        run: |
          ./build_metal.sh --build-tests --build-programming-examples
          PYTHON_CMD=python3.10 source ./create_venv.sh
          TT_METAL_SKIP_ETH_CORES_WITH_RETRAIN=1 ./build/test/tt_metal/unit_tests_dispatch --gtest_filter="CommandQueueSingleCardFixture.*"
          #Tests Metal command queue basic apis
          TT_METAL_SKIP_ETH_CORES_WITH_RETRAIN=1 ./build/test/tt_metal/unit_tests_dispatch --gtest_filter="CommandQueueSingleCardProgramFixture.*"
          #Tests Metal program apis
          TT_METAL_SKIP_ETH_CORES_WITH_RETRAIN=1 ./build/test/tt_metal/unit_tests_dispatch --gtest_filter="CommandQueueSingleCardBufferFixture.ShardedBufferLarge*ReadWrites"
          ./build/test/tt_metal/unit_tests_dispatch --gtest_filter=RandomProgramFixture.*
          ./build/test/tt_metal/unit_tests_api_blackhole --gtest_filter=*SimpleDram*:*SimpleL1*
          ./build/test/tt_metal/unit_tests_dispatch --gtest_filter=CommandQueueSingleCardBufferFixture.*
      - name: cleanup
        if: ${{ always() }}
        run: |
          # Clean out metal
          rm -rf tt-metal
