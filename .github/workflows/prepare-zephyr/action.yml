name: Zephyr Environment Setup (Composite)
description: |
  This workflow prepares the Zephyr environment for building, testing, or other tasks. It is
  intended to be used as a reusable (composite) step in other workflows, and must
  be run within a container that includes the Zephyr SDK installation.

inputs:
  app-path:
    description: 'Path to the Zephyr application to build'
    required: true

runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install curl
      shell: bash
      run: |
        if ! command -v curl &> /dev/null ; then
          apt-get update
          apt-get install -y curl
        fi

    - name: Install Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        rustflags: '-A warnings'

    # This step is required because stateful runners (e.g. self-hosted runners) may have
    # a stale copy of the repos in the manifest. This step ensures that all state
    # repos are cleaned out before the manifest is cloned.
    - name: Remove existing data
      shell: bash
      run: |
        if [ -d ".west" ]; then
          echo "Cleaning out old west manifest directories"
          for dir in $(west list -f "{path}"); do
            if [ $dir != ${{ inputs.app-path }} ]; then
              echo "Removing $dir"
              rm -rf $dir
            fi
          done
          rm -rf ".west"
        fi
        if [ -d "zephyr-sdk" ]; then
          echo "Cleaning out old zephyr-sdk directory"
          rm -rf zephyr-sdk
        fi
        # Remove any stale hal_stm32 blobs directories to avoid west blobs fetch errors
        rm -Rf $(find * -path '*/hal/stm32/zephyr/blobs')

        N_LOCKS=$(find * -path '*/.git/shallow.lock' | wc -l)
        if [ $N_LOCKS -gt 0 ]; then
          echo "Cleaning out $N_LOCKS stale .git/shallow.lock files"
          find * -path '*/.git/shallow.lock' -exec rm -f {} \;
        fi

    # TODO: potentially improve caching strategy
    # Note: this step performs "west init", "west update", and installs zephyr python dependencies
    - name: Set up Zephyr project
      uses: zephyrproject-rtos/action-zephyr-setup@v1
      with:
        app-path: ${{ inputs.app-path }}
        toolchains: arm-zephyr-eabi:riscv64-zephyr-elf:x86_64-zephyr-elf:arc-zephyr-elf

    - name: Verify binary blobs
      shell: bash
      run: |
        west blobs fetch

    - name: Apply patches
      shell: bash
      run: |
        west -v patch apply
