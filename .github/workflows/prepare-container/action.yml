name: Zephyr Container Setup (Composite)
description: |
  This workflow prepares the Zephyr container environment for building, testing, or other tasks. It is
  intended to be used as a reusable (composite) step in other workflows, and should
  be run within the base tt-zephyr-platforms container.

inputs:
  app-path:
    description: 'Path to the Zephyr application to build'
    required: true

runs:
  using: composite
  steps:
    - name: Apply container owner mismatch workaround
      shell: bash
      run: |
        # FIXME: The owner UID of the GITHUB_WORKSPACE directory may not
        #        match the container user UID because of the way GitHub
        #        Actions runner is implemented. Remove this workaround when
        #        GitHub comes up with a fundamental fix for this problem.
        git config --global --add safe.directory ${GITHUB_WORKSPACE}

    # This step is required because stateful runners (e.g. self-hosted runners) may have
    # a stale copy of the repos in the manifest. This step ensures that all state
    # repos are cleaned out before the manifest is cloned.
    - name: Remove existing data
      shell: bash
      run: |
        if [ -d ".west" ]; then
          echo "Cleaning out old west manifest directories"
          for dir in $(west list -f "{path}"); do
            if [ $dir != ${{ inputs.app-path }} ]; then
              echo "Removing $dir"
              rm -rf $dir
            fi
          done
          rm -rf ".west"
        fi
        if [ -d "zephyr-sdk" ]; then
          echo "Cleaning out old zephyr-sdk directory"
          rm -rf zephyr-sdk
        fi
        # Remove any stale hal_stm32 blobs directories to avoid west blobs fetch errors
        rm -Rf $(find * -path '*/hal/stm32/zephyr/blobs')

        N_LOCKS=$(find * -path '*/.git/shallow.lock' | wc -l)
        if [ $N_LOCKS -gt 0 ]; then
          echo "Cleaning out $N_LOCKS stale .git/shallow.lock files"
          find * -path '*/.git/shallow.lock' -exec rm -f {} \;
        fi

    - name: Set Environment Variables
      shell: bash
      run: |
        echo "ZEPHYR_BASE=${{github.workspace}}/zephyr" >> $GITHUB_ENV

        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Environment Setup
      shell: bash
      run: |

        if [ -d ".west" ]; then
          echo "Removing old west configuration"
          rm -rf ".west"
        fi
        west init -l ${{ inputs.app-path }} || true
        west config --global update.narrow true
        west update --path-cache /tt-zephyr || ( rm -rf modules bootloader tools && west update --path-cache /tt-zephyr)
        west forall -c 'git reset --hard HEAD'
        west patch clean

        # FIXME: use zephyr/SDK_VERSION when it matches with the installed SDK version
        echo "ZEPHYR_SDK_INSTALL_DIR=/opt/toolchains/zephyr-sdk-0.17.2" >> $GITHUB_ENV

    - name: Install Zephyr SDK CMake package
      shell: bash
      run: |
        # Remove old CMake pakages
        rm -rf $HOME/.cmake/packages/Zephyr-sdk
        # Install Zephyr SDK CMake package
        ${ZEPHYR_SDK_INSTALL_DIR}/setup.sh -c

    - name: Update python packages
      shell: bash
      run: |
        west packages pip --install

    - name: Verify binary blobs
      shell: bash
      run: |
        # verify blobs (for tt-zephyr-platforms only - we do not depend on other blobs)
        west blobs fetch tt-zephyr-platforms

    - name: Apply patches
      shell: bash
      run: |
        west -v patch apply

    - name: Install modinfo
      shell: bash
      run: |
        if ! command -v modinfo &> /dev/null ; then
          apt-get update
          apt-get install -y kmod
        fi

    - name: Log system state
      shell: bash
      run: |
        echo "Zephyr SDK: $ZEPHYR_SDK_INSTALL_DIR"
        echo "Python: $( which python3 ) $( python3 --version )"
        echo "Pip: $( which pip3 ) $( pip3 --version )"
        echo "West: $( which west ) $( west --version )"
        echo "CMake: $( which cmake ) $( cmake --version | head -n 1 )"
        echo "Ninja: $( which ninja ) $( ninja --version )"
        echo "Rustc: $( which rustc ) $( rustc --version )"
        echo "Cargo: $( which cargo ) $( cargo --version )"
        echo "PIP packages:"
        pip3 freeze
        echo "tt-kmd version:"
        modinfo tenstorrent
