- name: Configure Zephyr CI System
  hosts: all
  become: true
  gather_facts: true
  vars:
    jlink_serial: ""
    stlink_serial: ""
    zephyr_marker_file: tenstorrent/.zephyr_setup_done
  tasks:
    # Check if Zephyr is already set up

    - name: Check for Zephyr setup marker
      stat:
        path: "{{ zephyr_marker_file }}"
      register: zephyr_marker

    - name: Skip setup if marker file exists
      meta: end_play
      when: zephyr_marker.stat.exists

    # STLink and JLink ID

    - name: Identify Tenstorrent PCI device
      block:
        - name: Determine Tenstorrent card model from PCI ID
          ansible.builtin.set_fact:
            tenstorrent_card: p150a

    - name: Get list of USB devices
      ansible.builtin.shell: ls /dev/bus/usb/*/*
      register: usb_devices
      changed_when: false

    - name: Find J-Link info
      ansible.builtin.shell: |
        for dev in {{ usb_devices.stdout_lines | join(' ') }}; do
          udevadm info --name=$dev 2>/dev/null | grep -q "ID_VENDOR=SEGGER" && \
          udevadm info --name=$dev | grep "ID_SERIAL_SHORT" && break
        done
      register: jlink_info
      changed_when: false

    - name: Parse J-Link ID
      set_fact:
        jlink_id: "{{ jlink_info.stdout | regex_search('ID_SERIAL_SHORT=(\\w+)', '\\1') | default('NOT_FOUND') }}"

    - name: Find ST-Link info
      ansible.builtin.shell: |
        for dev in {{ usb_devices.stdout_lines | join(' ') }}; do
          udevadm info --name=$dev 2>/dev/null | grep -q "ID_VENDOR=STMicroelectronics" && \
          udevadm info --name=$dev | grep "ID_SERIAL_SHORT" && break
        done
      register: stlink_info
      changed_when: false

    - name: Parse ST-Link ID
      set_fact:
        stlink_id: "{{ stlink_info.stdout | regex_search('ID_SERIAL_SHORT=(\\w+)', '\\1') | default('NOT_FOUND') }}"

    - name: Found JLink and STLink IDs
      debug:
        msg:
          - "JLink ID: {{ jlink_id }}"
          - "STLink ID: {{ stlink_id }}"

    - name: Generate dynamic hardware map file
      copy:
        dest: hw-map.yml
        content: |
          - connected: true
            id: "{{ stlink_id }}"
            platform: tt_blackhole@p150a/tt_blackhole/dmc
            runner: openocd
            serial_pty: "rtt"
            flash_before: true
            product: ST-Link

          - connected: true
            id: "{{ jlink_id }}"
            platform: tt_blackhole@p150a/tt_blackhole/smc
            runner: openocd
            runner_params:
              - "--openocd=/opt/tenstorrent/bin/openocd-rtt"
              - "--rtt-no-reset"
            serial_pty: "rtt"
            flash_before: true
            product: J-Link

    # Setup Zephyr Environment

    - name: Install dependencies
      ansible.builtin.apt:
        name:
          - git
          - cmake
          - ninja-build
          - gperf
          - ccache
          - dfu-util
          - device-tree-compiler
          - wget
          - python3-dev
          - python3-venv
          - python3-tk
          - xz-utils
          - file
          - make
          - gcc
          - gcc-multilib
          - g++-multilib
          - libsdl2-dev
          - libmagic1
        state: present
        update_cache: true

    - name: Create Tenstorrent workspace
      ansible.builtin.file:
        path: tenstorrent
        state: directory

    - name: Create venv and install west
      ansible.builtin.shell: |
        cd tenstorrent &&
        python -m venv .venv &&
        . .venv/bin/activate &&
        pip install west

    - name: Init west project
      ansible.builtin.shell:
        cd tenstorrent &&
        . .venv/bin/activate &&
        west init -m https://github.com/tenstorrent/tt-zephyr-platforms .

    - name: Set git compression to 0 to prevent fetch failures
      ansible.builtin.shell: |
        git config --global core.compression 0 &&
        git config --global http.postBuffer 524288000

    - name: Update west modules
      ansible.builtin.shell: |
        cd tenstorrent &&
        . .venv/bin/activate &&
        west update &&
        west packages pip --install

    - name: Fetch west blobs
      ansible.builtin.shell: |
        cd tenstorrent &&
        . .venv/bin/activate &&
        west blobs fetch

    - name: Apply west patches
      ansible.builtin.shell: |
        cd tenstorrent &&
        . .venv/bin/activate &&
        west patch apply

    - name: Export Zephyr environment
      ansible.builtin.shell: |
        cd tenstorrent &&
        . .venv/bin/activate &&
        bash -c "source zephyr/zephyr-env.sh && west zephyr-export"

    - name: Install Zephyr SDK using west
      ansible.builtin.shell: |
        cd tenstorrent &&
        . .venv/bin/activate &&
        bash -c "source zephyr/zephyr-env.sh" &&
        west zephyr-export &&
        west sdk install --install-base . &&
        cd zephyr-sdk-0.17.2

    - name: Setup SDK
      ansible.builtin.shell: |
        cd tenstorrent/zephyr-sdk-0.17.2
        ./setup.sh << EOF
        y
        y
        EOF

    - name: Set udev rules
      ansinle.builtin.shell: |
        wget -O 60-openocd.rules https://sf.net/p/openocd/code/ci/master/tree/contrib/60-openocd.rules?format=raw
        sudo cp 60-openocd.rules /etc/udev/rules.d
        sudo udevadm control --reload

    # Tenstorrent HugePages

    - name: Setup HugePages
      ansible.builtin.shell: |
        export TEMP_DIR=$(mktemp -d)
        wget -P $TEMP_DIR https://github.com/tenstorrent/tt-system-tools/releases/download/upstream%2F1.1/tenstorrent-tools_1.1-5_all.deb
        sudo apt-get install -y --no-install-recommends $TEMP_DIR/tenstorrent-tools_1.1-5_all.deb
        sudo systemctl enable --now tenstorrent-hugepages.service
        rm -rf "$TEMP_DIR"

    # Github Runner

    - name: Extract GitHub runner
      ansible.builtin.shell: |
        _UID=$(id -u)
        _GID=$(id -g)
        sudo mkdir -p /opt/tenstorrent/github
        sudo chown -R $_UID:$_GID /opt/tenstorrent/github
        cd /opt/tenstorrent/github
        curl -O -L https://github.com/actions/runner/releases/download/v2.320.1/actions-runner-linux-x64-2.320.1.tar.gz
        tar xzf ./actions-runner-linux-x64-2.320.1.tar.gz

    - name: Configure the service
      ansible.builtin.shell: |
        RUNNER_ALLOW_RUNASROOT="1" ./config.sh --url https://github.com/tenstorrent --runnergroup syseng --token <token> --name <name> --labels <labels>

    - name: Install the service
      ansible.builtin.shell: |
        sudo ./svc.sh install
        sudo ./svc.sh start

    - name: Pre and Post job hooks
      ansible.builtin.shell: |
        ACTIONS_RUNNER_HOOK_JOB_STARTED=/opt/tenstorrent/blackhole-recovery/restore-bh-fw.sh
        ACTIONS_RUNNER_HOOK_JOB_COMPLETED=/opt/tenstorrent/blackhole-recovery/restore-bh-fw.sh

    # Marker file

    - name: Create marker file to avoid re-running
      file:
        path: "{{ zephyr_marker_file }}"
        state: touch
